{# ############## Shared Variables in all views ################
| Variable                                           | Type     | Description                                                                                              |
|----------------------------------------------------|----------|----------------------------------------------------------------------------------------------------------|
| store                                              | Store    |                                                                                                          |
| store.id                                           | int      |                                                                                                          |
| store.name                                         | string   |                                                                                                          |
| store.username                                     | string   |                                                                                                          |
| store.description                                  | string   |                                                                                                          |
| store.slogan                                       | ?string  | * if feature in twilight.json                                                                            |
| store.logo                                         | string   |                                                                                                          |
| store.url                                          | string   |                                                                                                          |
| store.api                                          | string   | the api url for current store                                                                            |
| store.icon                                         | string   | *fav icon url                                                                                            |
| store.contacts                                     | object   | [mobile, phone, email, whatsapp, telegram], ex. store.contacts.email                                     |
| store.social                                       | object   | [instagram, snapchat, twitter, youtube, facebook, pinterest, maroof, whatsapp], ex. store.social.twitter |
| store.settings                                     | object   |                                                                                                          |
| store.settings.auth.email_allowed                  | bool     |                                                                                                          |
| store.settings.auth.mobile_allowed                 | bool     |                                                                                                          |
| store.settings.auth.is_email_required              | bool     |                                                                                                          |
| store.settings.cart.apply_coupon_enabled           | bool     | Does visitor allowed to applay coupon in cart page                                                       |
| store.settings.product.total_sold_enabled          | bool     |                                                                                                          |
| store.settings.product.fit_type                    | ?string  | null when equal product card size is off, or ['cover', 'contain']                                        |
| store.settings.category.testimonial_enabled        | bool     | Show random testimonials in category page                                                                |
| store.settings.tax.number                          | ?string  |                                                                                                          |
| store.settings.tax.certificate                     | ?string  | certificate image url                                                                                    |
| store.settings.tax.taxable_prices_enabled          | bool     | Does tax included in the prices ex product_price 100 & tax is 15, price will be 115                      |
| store.settings.rating_enabled                      | bool     | Is one of: store_enabled or shipping_enabled or products_enabled                                         |
| store.settings.arabic_numbers_enabled              | bool     | Does the merchant wants the numbers to be shown as Arabic format                                         |
| store.settings.is_multilingual                     | bool     |                                                                                                          |
| store.settings.currencies_enabled                  | bool     |     
| theme                                              | Theme    |                                                                                                          |
| theme.id                                           | int      |                                                                                                          |
| theme.name                                         | string   |                                                                                                          |
| theme.mode                                         | string   | `live`, `preview`                                                                                        |
| theme.is_rtl                                       | bool     |                                                                                                          |
| theme.translations_hash                            | int      | to be used in case merchant updated frontend store translations                                          |
| theme.color                                        | object   |                                                                                                          |
| theme.color.primary                                | string   |                                                                                                          |
| theme.color.text                                   | string   | suitable text color comparing to `theme.primary.color`, #000000, #FFFFFF                                 |
| theme.color.reverse_primary                        | string   |                                                                                                          |
| theme.color.reverse_text                           | string   | if `theme.text_color=#000000` means that `theme.reverse_text_color=#FFFFFF`                              |
| theme.color.is_dark                                | bool     | Does main store color `theme.primary.color` considered as dim color?                                     |
| theme.color.darker(float alpha, ?string hexColor)  | string   | get darker color from `theme.primary.color` or from passed color, `alpha` range from 0.0-1.0             |
| theme.color.lighter(float alpha, ?string hexColor) | string   | get lighter color from `theme.primary.color` or from passed color, `alpha` range from 0.0-1.0            |
| theme.font                                         | ?object  | Salla predefined font, null when the theme doesn't have `fonts` feature                                  |
| theme.font.name                                    | string   | DINNextLTArabic-Regular, Amazon-Ember, Apple, Dubai, Estedad                                             |
| theme.font.url                                     | string   | css full url ex: 'https://my_store.test/dist/fonts/default.css'                                          |
| theme.settings                                     | object   | dynamic object with values of the `settings` in twilight.json ex. `theme.settings.topnav_is_dark`        |
| theme.settings.set(settingName, value)             | string   | set global var, then get it {{theme.settings.get('my_var','fallback') }}                                 |
| theme.settings.get(settingName, default=null)      | mixed    | get theme setting ex `theme.settings.get('my_var', 'fallback')`                                          |
#}
<!DOCTYPE html>
<html lang="{{ user.language.code }}" dir="{{ user.language.dir }}">
<!-- بسم الله الرحمن الرحيم -->
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    {{ theme.settings.set('placeholder', 'images/placeholder.png') }}

    {% include 'pages.partials.loading-screen-assets' %}

    <script defer data-cfasync="false" src="{{ 'product-card.js'|asset }}"></script>
    <script defer src="{{ 'main-menu.js'|asset }}"></script>

    {% block head_scripts %}{% endblock %}


    <script data-cfasync="false">
        window.header_is_sticky = "{{theme.settings.get('header_is_sticky', 'Default Value')}}"
        window.imageZoom = "{{theme.settings.get('imageZoom')}}"
        window.can_access_wallet = {{ user.can_access_wallet | json_encode }}
    </script>

    <script src="{{ asset('assets/my-custom-product-card.js') }}"></script>
    {% hook 'head:start' %}
    {% hook head %}
    {% block styles %}{% endblock %}
    <link rel="stylesheet" href="{{ 'app.css' | asset }}">
    <link rel="stylesheet" href="{{ theme.font.path|cdn }}"/>
    <link rel="stylesheet" href="{{ 'fonts/sallaicons.css'|cdn }}"/>
    
    <style>
        /* @font-face {
  
  font-family: 'sallamenuthemeicons';
  src: url({{ 'fonts/themefonticons.ttf' | asset }}) format("truetype"),
  url({{ 'fonts/themefonticons.eot' | asset }}) format("embedded-opentype"),
  url({{'fonts/themefonticons.woff' | asset }}) format("woff");
} */
        :root {
            --font-main: '{{theme.font.name}}';
            --color-primary: {{ theme.color.primary }};
            --color-primary-dark: {{ theme.color.darker(0.15) }};
            --color-primary-light: {{ theme.color.lighter(0.15) }};
            --color-primary-reverse: {{ theme.color.reverse_text }};
        }
    </style>
    {# tracking services, custom css feature. #}
    {% hook 'head:end' %}
</head>
<body id="app" class="overflow-x-hidden {% hook 'body:classes' %}
  {{ theme.settings.get('footer_is_dark') ? ' footer-is-dark' : ' footer-is-light' }}
  {{ theme.settings.get('topnav_is_dark') ? ' topnav-is-dark' : '' }}
  {{ theme.settings.get('sticky_add_to_cart') ? ' is-sticky-product-bar' : '' }}
  ">
  <div class="loader-init"></div>
<noscript>
    To get full functionality of this site you need to enable JavaScript. Here is how
    <a href="https://www.enable-javascript.com/" rel="noreferrer"
       target="_blank">To enable JavaScript on webpage</a>.
</noscript>
<div class="app-inner flex flex-col min-h-full">
    {% hook 'body:start' %}
   
    {% component 'header.header' %}
    {% block content %}{% endblock %}
    {% component 'footer.footer' %}
</div>
{% hook 'body:end' %}
<script defer src="{{ 'app.js' | asset }}"></script>

{# Twilight Components #}
<salla-offer-modal></salla-offer-modal>
<salla-search></salla-search>

{% if user.type=='guest' %}
    <salla-login-modal></salla-login-modal>
{% endif %}
{% block scripts %}{% endblock %}
<script defer src="{{ 'app.js' | asset }}"></script>
<script>
  // تحديد العملة بناءً على رمز الدولة
  function setCurrencyByCountryCode(code) {
    const currencies = {
  'AF': 'AFN',
  'AL': 'ALL',
  'DZ': 'DZD',
  'AD': 'EUR',
  'AO': 'AOA',
  'AR': 'ARS',
  'AM': 'AMD',
  'AU': 'AUD',
  'AT': 'EUR',
  'AZ': 'AZN',
  'BH': 'BHD',
  'BD': 'BDT',
  'BY': 'BYN',
  'BE': 'EUR',
  'BJ': 'XOF',
  'BT': 'BTN',
  'BO': 'BOB',
  'BA': 'BAM',
  'BW': 'BWP',
  'BR': 'BRL',
  'BN': 'BND',
  'BG': 'BGN',
  'BF': 'XOF',
  'BI': 'BIF',
  'KH': 'KHR',
  'CM': 'XAF',
  'CA': 'CAD',
  'CV': 'CVE',
  'CF': 'XAF',
  'TD': 'XAF',
  'CL': 'CLP',
  'CN': 'CNY',
  'CO': 'COP',
  'KM': 'KMF',
  'CD': 'CDF',
  'CG': 'XAF',
  'CR': 'CRC',
  'CI': 'XOF',
  'HR': 'EUR',
  'CU': 'CUP',
  'CY': 'EUR',
  'CZ': 'CZK',
  'DK': 'DKK',
  'DJ': 'DJF',
  'DO': 'DOP',
  'EC': 'USD',
  'EG': 'EGP',
  'SV': 'USD',
  'GQ': 'XAF',
  'ER': 'ERN',
  'EE': 'EUR',
  'ET': 'ETB',
  'FJ': 'FJD',
  'FI': 'EUR',
  'FR': 'EUR',
  'GA': 'XAF',
  'GM': 'GMD',
  'GE': 'GEL',
  'DE': 'EUR',
  'GH': 'GHS',
  'GR': 'EUR',
  'GT': 'GTQ',
  'GN': 'GNF',
  'GW': 'XOF',
  'GY': 'GYD',
  'HT': 'HTG',
  'HN': 'HNL',
  'HU': 'HUF',
  'IS': 'ISK',
  'IN': 'INR',
  'ID': 'IDR',
  'IR': 'IRR',
  'IQ': 'IQD',
  'IE': 'EUR',
  'IL': 'ILS',
  'IT': 'EUR',
  'JM': 'JMD',
  'JP': 'JPY',
  'JO': 'JOD',
  'KZ': 'KZT',
  'KE': 'KES',
  'KI': 'AUD',
  'KP': 'KPW',
  'KR': 'KRW',
  'KW': 'KWD',
  'KG': 'KGS',
  'LA': 'LAK',
  'LV': 'EUR',
  'LB': 'LBP',
  'LS': 'LSL',
  'LR': 'LRD',
  'LY': 'LYD',
  'LI': 'CHF',
  'LT': 'EUR',
  'LU': 'EUR',
  'MG': 'MGA',
  'MW': 'MWK',
  'MY': 'MYR',
  'MV': 'MVR',
  'ML': 'XOF',
  'MT': 'EUR',
  'MH': 'USD',
  'MR': 'MRU',
  'MU': 'MUR',
  'MX': 'MXN',
  'FM': 'USD',
  'MD': 'MDL',
  'MC': 'EUR',
  'MN': 'MNT',
  'ME': 'EUR',
  'MA': 'MAD',
  'MZ': 'MZN',
  'MM': 'MMK',
  'NA': 'NAD',
  'NP': 'NPR',
  'NL': 'EUR',
  'NZ': 'NZD',
  'NI': 'NIO',
  'NE': 'XOF',
  'NG': 'NGN',
  'NO': 'NOK',
  'OM': 'OMR',
  'PK': 'PKR',
  'PW': 'USD',
  'PA': 'PAB',
  'PG': 'PGK',
  'PY': 'PYG',
  'PE': 'PEN',
  'PH': 'PHP',
  'PL': 'PLN',
  'PT': 'EUR',
  'QA': 'QAR',
  'RO': 'RON',
  'RU': 'RUB',
  'RW': 'RWF',
  'KN': 'XCD',
  'LC': 'XCD',
  'VC': 'XCD',
  'WS': 'WST',
  'SM': 'EUR',
  'ST': 'STN',
  'SA': 'SAR',
  'SN': 'XOF',
  'RS': 'RSD',
  'SC': 'SCR',
  'SL': 'SLL',
  'SG': 'SGD',
  'SK': 'EUR',
  'SI': 'EUR',
  'SB': 'SBD',
  'SO': 'SOS',
  'ZA': 'ZAR',
  'SS': 'SSP',
  'ES': 'EUR',
  'LK': 'LKR',
  'SD': 'SDG',
  'SR': 'SRD',
  'SE': 'SEK',
  'CH': 'CHF',
  'SY': 'SYP',
  'TW': 'TWD',
  'TJ': 'TJS',
  'TZ': 'TZS',
  'TH': 'THB',
  'TL': 'USD',
  'TG': 'XOF',
  'TO': 'TOP',
  'TT': 'TTD',
  'TN': 'TND',
  'TR': 'TRY',
  'TM': 'TMT',
  'UG': 'UGX',
  'UA': 'UAH',
  'AE': 'AED',
  'GB': 'GBP',
  'US': 'USD',
  'UY': 'UYU',
  'UZ': 'UZS',
  'VU': 'VUV',
  'VA': 'EUR',
  'VE': 'VES',
  'VN': 'VND',
  'YE': 'YER',
  'ZM': 'ZMW',
  'ZW': 'ZWL'
};

    const currency = currencies[code] ; // الافتراضي إذا مفيش تطابق
    Salla.Currency.set(currency);
  }

  // دالة لاكتشاف الدولة وتغيير العملة
  function detectAndSetCurrency() {
    fetch('https://ipapi.co/json/') // بتجيب البيانات الجغرافية من خدمة IP
      .then(res => res.json())
      .then(data => {
        const countryCode = data.country;
        setCurrencyByCountryCode(countryCode);
        // نخزن العملة المختارة في الـ localStorage
        localStorage.setItem('salla:currency', countryCode);
      })
      .catch(err => {
        console.warn('IP lookup failed', err);
      });
  }

  // التحقق من تحميل Salla قبل تنفيذ أي شيء
  const waitForSalla = setInterval(() => {
    if (window.Salla && Salla.Currency) {
      clearInterval(waitForSalla);
      // إذا كانت هناك عملة مخزنة مسبقًا، لا نغيرها
      //const storedCurrency = localStorage.getItem('salla:currency');
      if (!storedCurrency) {
        detectAndSetCurrency();  // إذا مفيش عملة مخزنة نغيرها بناءً على الموقع
      } else {
        const countryCode = storedCurrency;
        setCurrencyByCountryCode(countryCode);  // نعيد تعيين العملة بناءً على المخزن
      }
    }
  }, 300);
</script>




</body>
</html>
